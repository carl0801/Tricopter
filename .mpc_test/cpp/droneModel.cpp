
#include <cmath>
#include "Eigen/Dense"

using namespace Eigen;

// Define a helper function to assign variables
void assignVariables(const Vector3f& f, const VectorXf& s, const VectorXf& l, 
                     const Vector3f& pt, const Vector3f& p0, const Vector3f& v0, const Vector3f& w0, const Matrix3f& R,
                     float& f1, float& f2, float& f3,  
                     float& s0, float& s1, float& s2, float& s3, float& s4, float& s5,
                     float& l0, float& l1, float& l2, float& l3, float& l4, float& l5,
                     float& ptx, float& pty, float& ptz, float& p0x, float& p0y, float& p0z, 
                     float& v0x, float& v0y, float& v0z, float& w0x, float& w0y, float& w0z,
                     float& r00, float& r01, float& r02, float& r10, float& r11, float& r12,
                     float& r20, float& r21, float& r22) {
    // Assigning variables
    f1 = f[0];
    f2 = f[1];
    f3 = f[2];
    s0 = s[0];
    s1 = s[1];
    s2 = s[2];
    s3 = s[3];
    s4 = s[4];
    s5 = s[5];
    l0 = l[0];
    l1 = l[1];
    l2 = l[2];
    l3 = l[3];
    l4 = l[4];
    l5 = l[5];
    ptx = pt[0];
    pty = pt[1];
    ptz = pt[2];
    p0x = p0[0];
    p0y = p0[1];
    p0z = p0[2];
    v0x = v0[0];
    v0y = v0[1];
    v0z = v0[2];
    w0x = w0[0];
    w0y = w0[1];
    w0z = w0[2];
    r00 = R(0,0);
    r01 = R(0,1);
    r02 = R(0,2);
    r10 = R(1,0);
    r11 = R(1,1);
    r12 = R(1,2);
    r20 = R(2,0);
    r21 = R(2,1);
    r22 = R(2,2);
}

// Define the function to be optimized
float costFunction(Vector3f f, VectorXf s, VectorXf l,
                   Vector3f pt, Vector3f p0, Vector3f v0, Vector3f w0, Matrix3f R, 
                   float mu, float fMax, float fMin, float t){
    // Declare variables
    float f1, f2, f3, s0, s1, s2, s3, s4, s5, l0, l1, l2, l3, l4, l5;
    float ptx, pty, ptz, p0x, p0y, p0z, v0x, v0y, v0z, w0x, w0y, w0z, r00, r01, r02, r10, r11, r12, r20, r21, r22;

    // Call helper function to assign variables
    assignVariables(f, s, l, pt, p0, v0, w0, R, 
                    f1, f2, f3, s0, s1, s2, s3, s4, s5, l0, l1, l2, l3, l4, l5,
                    ptx, pty, ptz, p0x, p0y, p0z, v0x, v0y, v0z, w0x, w0y, w0z, r00, r01, r02, r10, r11, r12, r20, r21, r22);

float x0 = 0.95799999999999996*t;
float x1 = 0.5*t;
float x2 = r00*r22;
float x3 = 0.010261583652774535*f1;
float x4 = r11*x3;
float x5 = r01*x4;
float x6 = r02*r10;
float x7 = r21*x6;
float x8 = r01*x3;
float x9 = r00*r12;
float x10 = f2*x9;
float x11 = 0.0051307918263872676*r21;
float x12 = r01*x11;
float x13 = r02*r20;
float x14 = f2*x13;
float x15 = 0.0051307918263872676*r11;
float x16 = r01*x15;
float x17 = f3*r01;
float x18 = x15*x17;
float x19 = pow(r01, 2);
float x20 = r12*r20;
float x21 = 0.0051307918263872676*x19;
float x22 = f2*r22;
float x23 = r10*x22;
float x24 = r10*r22;
float x25 = sqrt(3);
float x26 = 0.0066690518704222565*x25;
float x27 = r10*x26;
float x28 = r00*x26;
float x29 = pow(r00, 2);
float x30 = x26*x29;
float x31 = pow(t, 2);
float x32 = 0.25*x31;
float x33 = w0x*x1 + x32*(0.010261583652774535*f1*r00*r01*r12*r21 + 0.010261583652774535*f1*r01*r02*r11*r20 + 0.010261583652774535*f1*r10*r22*x19 + 0.0051307918263872676*f2*r00*r01*r11*r22 + 0.0066690518704222565*f2*r00*r01*r12*r20*x25 + 0.0066690518704222565*f2*r00*r02*r10*r21*x25 + 0.0051307918263872676*f2*r01*r02*r10*r21 + 0.0066690518704222565*f2*r11*r22*x25*x29 + 0.0051307918263872676*f2*r12*r20*x19 - f2*r12*r21*x30 + 0.0066690518704222565*f3*r00*r01*r10*r22*x25 + 0.0051307918263872676*f3*r00*r01*r11*r22 + 0.0066690518704222565*f3*r00*r02*r11*r20*x25 + 0.0051307918263872676*f3*r01*r02*r10*r21 - f3*r11*r22*x30 + 0.0051307918263872676*f3*r12*r20*x19 + 0.0066690518704222565*f3*r12*r21*x25*x29 - f3*x21*x24 - f3*x28*x7 - r00*r01*x22*x27 - r11*x14*x28 - 0.0051307918263872676*r21*x17*x9 - x10*x12 - x13*x18 - x14*x16 - x17*x20*x28 - x19*x20*x3 - x2*x5 - x21*x23 - x7*x8) + atan2(r21, r22);
float x34 = sin(x33);
float x35 = r21*x15;
float x36 = f3*x35;
float x37 = pow(r21, 2);
float x38 = 0.0051307918263872676*x37;
float x39 = r20*x26;
float x40 = pow(r20, 2);
float x41 = x26*x40;
float x42 = w0z*x1 + x32*(0.010261583652774535*f1*r00*r12*x37 + 0.010261583652774535*f1*r01*r10*r21*r22 + 0.010261583652774535*f1*r02*r11*r20*r21 + 0.0066690518704222565*f2*r00*r11*r20*r22*x25 + 0.0051307918263872676*f2*r00*r11*r21*r22 + 0.0051307918263872676*f2*r01*r12*r20*r21 + 0.0066690518704222565*f2*r01*r12*x25*x40 + 0.0066690518704222565*f2*r02*r10*r20*r21*x25 + 0.0051307918263872676*f2*r02*r10*x37 - f2*r02*r11*x41 - f2*r21*x20*x28 + 0.0051307918263872676*f3*r00*r11*r21*r22 + 0.0066690518704222565*f3*r00*r12*r20*r21*x25 + 0.0066690518704222565*f3*r01*r10*r20*r22*x25 + 0.0051307918263872676*f3*r01*r12*r20*r21 + 0.0051307918263872676*f3*r02*r10*x37 + 0.0066690518704222565*f3*r02*r11*x25*x40 - f3*r11*x2*x39 - f3*r21*x13*x27 - f3*x38*x9 - r01*x23*x39 - r12*x17*x41 - r21*x2*x4 - r21*x20*x8 - x10*x38 - x11*x17*x24 - x12*x23 - x13*x36 - x14*x35 - x3*x37*x6) + atan2(r10, r00);
float x43 = sin(x42);
float x44 = cos(x42);
float x45 = cos(x33);
float x46 = pow(r11, 2);
float x47 = 0.0051307918263872676*x46;
float x48 = r11*x27;
float x49 = pow(r10, 2);
float x50 = x26*x49;
float x51 = w0y*x1 + x32*(0.010261583652774535*f1*r00*r11*r12*r21 + 0.010261583652774535*f1*r01*r10*r11*r22 + 0.010261583652774535*f1*r02*r20*x46 + 0.0066690518704222565*f2*r00*r10*r11*r22*x25 + 0.0051307918263872676*f2*r00*r22*x46 + 0.0066690518704222565*f2*r01*r10*r12*r20*x25 + 0.0051307918263872676*f2*r01*r11*r12*r20 + 0.0051307918263872676*f2*r02*r10*r11*r21 + 0.0066690518704222565*f2*r02*r21*x25*x49 + 0.0066690518704222565*f3*r00*r10*r12*r21*x25 + 0.0051307918263872676*f3*r00*r22*x46 + 0.0051307918263872676*f3*r01*r11*r12*r20 + 0.0066690518704222565*f3*r01*r22*x25*x49 + 0.0066690518704222565*f3*r02*r10*r11*r20*x25 + 0.0051307918263872676*f3*r02*r10*r11*r21 - f3*r02*r21*x50 - f3*x13*x47 - f3*x2*x48 - r01*x22*x50 - r21*x10*x27 - x10*x35 - x14*x47 - x14*x48 - x16*x23 - x17*x20*x27 - x18*x24 - x2*x3*x46 - x20*x5 - x36*x9 - x4*x7) + atan2(-r20, sqrt(pow(r22, 2) + x37));
float x52 = x45*sin(x51);
float x53 = x31*(f1 + f2 + f3);
float x54 = 1.0438413361169103*x45*cos(x51);

    // Perform your calculations using the assigned variables
    float result;
result = 1.0896047349863365*pow(0.95799999999999996*p0x - 0.95799999999999996*ptx + v0x*x0 + x53*(x34*x43 + x44*x52), 2) + 1.0896047349863365*pow(0.95799999999999996*p0y - 0.95799999999999996*pty + v0y*x0 + x53*(-x34*x44 + x43*x52), 2) + pow(p0z - ptz + 1.0*t*v0z + x31*(f1*x54 + f2*x54 + f3*x54 - 4.9050000000000002), 2);

    return result;
}

// Define the derivative of the function to be optimized
Vector3f costDerivative(Vector3f f, VectorXf s, VectorXf l,
                   Vector3f pt, Vector3f p0, Vector3f v0, Vector3f w0, Matrix3f R, 
                   float mu, float fMax, float fMin, float t){
    // Declare variables
    float f1, f2, f3, s0, s1, s2, s3, s4, s5, l0, l1, l2, l3, l4, l5; 
    float ptx, pty, ptz, p0x, p0y, p0z, v0x, v0y, v0z, w0x, w0y, w0z, r00, r01, r02, r10, r11, r12, r20, r21, r22;

    // Call helper function to assign variables
    assignVariables(f, s, l, pt, p0, v0, w0, R, 
                    f1, f2, f3, s0, s1, s2, s3, s4, s5, l0, l1, l2, l3, l4, l5,
                    ptx, pty, ptz, p0x, p0y, p0z, v0x, v0y, v0z, w0x, w0y, w0z, r00, r01, r02, r10, r11, r12, r20, r21, r22);

float x0 = 0.5*t;
float x1 = r00*r22;
float x2 = 0.010261583652774535*r01*r11;
float x3 = x1*x2;
float x4 = r02*r10;
float x5 = 0.010261583652774535*r21;
float x6 = r01*x5;
float x7 = x4*x6;
float x8 = r00*r12;
float x9 = 0.0051307918263872676*r21;
float x10 = r01*x9;
float x11 = x10*x8;
float x12 = r02*r20;
float x13 = r11*x12;
float x14 = 0.0051307918263872676*r01;
float x15 = x13*x14;
float x16 = pow(r01, 2);
float x17 = r12*r20;
float x18 = 0.010261583652774535*x16*x17;
float x19 = r10*r22;
float x20 = 0.0051307918263872676*x16;
float x21 = x19*x20;
float x22 = r01*x19;
float x23 = sqrt(3);
float x24 = 0.0066690518704222565*x23;
float x25 = r00*x24;
float x26 = x22*x25;
float x27 = x13*x25;
float x28 = r20*x24;
float x29 = r01*x28*x8;
float x30 = r21*x25*x4;
float x31 = pow(r00, 2);
float x32 = x24*x31;
float x33 = r12*r21*x32;
float x34 = r11*r22*x32;
float x35 = pow(t, 2);
float x36 = 0.25*x35;
float x37 = w0x*x0 + x36*(0.010261583652774535*f1*r00*r01*r12*r21 + 0.010261583652774535*f1*r01*r02*r11*r20 + 0.010261583652774535*f1*r10*r22*x16 - f1*x18 - f1*x3 - f1*x7 + 0.0051307918263872676*f2*r00*r01*r11*r22 + 0.0066690518704222565*f2*r00*r01*r12*r20*x23 + 0.0066690518704222565*f2*r00*r02*r10*r21*x23 + 0.0051307918263872676*f2*r01*r02*r10*r21 + 0.0066690518704222565*f2*r11*r22*x23*x31 + 0.0051307918263872676*f2*r12*r20*x16 - f2*x11 - f2*x15 - f2*x21 - f2*x26 - f2*x27 - f2*x33 + 0.0066690518704222565*f3*r00*r01*r10*r22*x23 + 0.0051307918263872676*f3*r00*r01*r11*r22 + 0.0066690518704222565*f3*r00*r02*r11*r20*x23 + 0.0051307918263872676*f3*r01*r02*r10*r21 + 0.0051307918263872676*f3*r12*r20*x16 + 0.0066690518704222565*f3*r12*r21*x23*x31 - f3*x11 - f3*x15 - f3*x21 - f3*x29 - f3*x30 - f3*x34) + atan2(r21, r22);
float x38 = cos(x37);
float x39 = pow(r21, 2);
float x40 = x17*x2;
float x41 = r11*x5;
float x42 = x4*x41;
float x43 = r11*x9;
float x44 = x43*x8;
float x45 = 0.0051307918263872676*r11*x22;
float x46 = pow(r11, 2);
float x47 = 0.010261583652774535*x1*x46;
float x48 = 0.0051307918263872676*x46;
float x49 = x12*x48;
float x50 = r10*x24;
float x51 = r21*x50*x8;
float x52 = r11*x28*x4;
float x53 = r11*x19*x25;
float x54 = r01*x17*x50;
float x55 = pow(r10, 2);
float x56 = x24*x55;
float x57 = r01*r22*x56;
float x58 = r02*r21*x56;
float x59 = w0y*x0 + x36*(0.010261583652774535*f1*r00*r11*r12*r21 + 0.010261583652774535*f1*r01*r10*r11*r22 + 0.010261583652774535*f1*r02*r20*x46 - f1*x40 - f1*x42 - f1*x47 + 0.0066690518704222565*f2*r00*r10*r11*r22*x23 + 0.0051307918263872676*f2*r00*r22*x46 + 0.0066690518704222565*f2*r01*r10*r12*r20*x23 + 0.0051307918263872676*f2*r01*r11*r12*r20 + 0.0051307918263872676*f2*r02*r10*r11*r21 + 0.0066690518704222565*f2*r02*r21*x23*x55 - f2*x44 - f2*x45 - f2*x49 - f2*x51 - f2*x52 - f2*x57 + 0.0066690518704222565*f3*r00*r10*r12*r21*x23 + 0.0051307918263872676*f3*r00*r22*x46 + 0.0051307918263872676*f3*r01*r11*r12*r20 + 0.0066690518704222565*f3*r01*r22*x23*x55 + 0.0066690518704222565*f3*r02*r10*r11*r20*x23 + 0.0051307918263872676*f3*r02*r10*r11*r21 - f3*x44 - f3*x45 - f3*x49 - f3*x53 - f3*x54 - f3*x58) + atan2(-r20, sqrt(pow(r22, 2) + x39));
float x60 = cos(x59);
float x61 = -1.0438413361169103*x38*x60;
float x62 = 0.26096033402922758*x35;
float x63 = f1*x62;
float x64 = 0.010261583652774535*r00*r11*r12*r21 + 0.010261583652774535*r01*r10*r11*r22 + 0.010261583652774535*r02*r20*x46 - x40 - x42 - x47;
float x65 = sin(x59);
float x66 = x38*x65;
float x67 = x64*x66;
float x68 = 0.010261583652774535*r00*r01*r12*r21 + 0.010261583652774535*r01*r02*r11*r20 + 0.010261583652774535*r10*r22*x16 - x18 - x3 - x7;
float x69 = sin(x37);
float x70 = x60*x69;
float x71 = x68*x70;
float x72 = f2*x62;
float x73 = f3*x62;
float x74 = x38*x60;
float x75 = 1.0438413361169103*x74;
float x76 = 2*x35;
float x77 = x76*(p0z - ptz + 1.0*t*v0z + x35*(f1*x75 + f2*x75 + f3*x75 - 4.9050000000000002));
float x78 = x1*x41;
float x79 = x17*x6;
float x80 = x22*x9;
float x81 = x13*x9;
float x82 = 0.010261583652774535*x39*x4;
float x83 = 0.0051307918263872676*x39;
float x84 = x8*x83;
float x85 = r21*x28;
float x86 = x8*x85;
float x87 = x22*x28;
float x88 = r11*x1;
float x89 = x28*x88;
float x90 = x4*x85;
float x91 = pow(r20, 2);
float x92 = x24*x91;
float x93 = r02*r11*x92;
float x94 = r01*r12*x92;
float x95 = w0z*x0 + x36*(0.010261583652774535*f1*r00*r12*x39 + 0.010261583652774535*f1*r01*r10*r21*r22 + 0.010261583652774535*f1*r02*r11*r20*r21 - f1*x78 - f1*x79 - f1*x82 + 0.0066690518704222565*f2*r00*r11*r20*r22*x23 + 0.0051307918263872676*f2*r00*r11*r21*r22 + 0.0051307918263872676*f2*r01*r12*r20*r21 + 0.0066690518704222565*f2*r01*r12*x23*x91 + 0.0066690518704222565*f2*r02*r10*r20*r21*x23 + 0.0051307918263872676*f2*r02*r10*x39 - f2*x80 - f2*x81 - f2*x84 - f2*x86 - f2*x87 - f2*x93 + 0.0051307918263872676*f3*r00*r11*r21*r22 + 0.0066690518704222565*f3*r00*r12*r20*r21*x23 + 0.0066690518704222565*f3*r01*r10*r20*r22*x23 + 0.0051307918263872676*f3*r01*r12*r20*r21 + 0.0051307918263872676*f3*r02*r10*x39 + 0.0066690518704222565*f3*r02*r11*x23*x91 - f3*x80 - f3*x81 - f3*x84 - f3*x89 - f3*x90 - f3*x94) + atan2(r10, r00);
float x96 = sin(x95);
float x97 = x69*x96;
float x98 = cos(x95);
float x99 = x66*x98;
float x100 = x35*(x97 + x99);
float x101 = 2*x100;
float x102 = x36*x38;
float x103 = x102*x68;
float x104 = x69*x98;
float x105 = x36*(0.010261583652774535*r00*r12*x39 + 0.010261583652774535*r01*r10*r21*r22 + 0.010261583652774535*r02*r11*r20*r21 - x78 - x79 - x82);
float x106 = x36*x74;
float x107 = x106*x64;
float x108 = x36*x65;
float x109 = x108*x68;
float x110 = x66*x96;
float x111 = f1 + f2 + f3;
float x112 = x111*x76;
float x113 = 0.95799999999999996*t;
float x114 = 1.0438413361169103*p0x - 1.0438413361169103*ptx + 1.0896047349863365*v0x*x113 + 1.0896047349863365*x100*x111;
float x115 = x35*(-x104 + x110);
float x116 = 2*x115;
float x117 = 1.0438413361169103*p0y - 1.0438413361169103*pty + 1.0896047349863365*v0y*x113 + 1.0896047349863365*x111*x115;
float x118 = -x26 - x27 + x29 + x30 - x33 + x34;
float x119 = x10*x4 - x11 + x118 + x14*x88 - x15 + x17*x20 - x21;
float x120 = x119*x70;
float x121 = -x51 - x52 + x53 + x54 - x57 + x58;
float x122 = r11*x14*x17 + x1*x48 + x121 + x4*x43 - x44 - x45 - x49;
float x123 = x122*x66;
float x124 = x102*x119;
float x125 = -x86 - x87 + x89 + x90 - x93 + x94;
float x126 = x36*(x10*x17 + x125 + x4*x83 - x80 - x81 - x84 + x88*x9);
float x127 = x108*x119;
float x128 = x106*x122;
float x129 = 0.0051307918263872676*r00*r01*r11*r22 + 0.0051307918263872676*r01*r02*r10*r21 + 0.0051307918263872676*r12*r20*x16 - x11 - x118 - x15 - x21;
float x130 = x129*x70;
float x131 = 0.0051307918263872676*r00*r22*x46 + 0.0051307918263872676*r01*r11*r12*r20 + 0.0051307918263872676*r02*r10*r11*r21 - x121 - x44 - x45 - x49;
float x132 = x131*x66;
float x133 = x102*x129;
float x134 = x36*(0.0051307918263872676*r00*r11*r21*r22 + 0.0051307918263872676*r01*r12*r20*r21 + 0.0051307918263872676*r02*r10*x39 - x125 - x80 - x81 - x84);
float x135 = x108*x129;
float x136 = x106*x131;

    // Perform your calculations using the assigned variables
    Vector3f result;
result[0] = x114*(x101 + x112*(x103*x96 + x104*x105 - x104*x109 - x105*x110 + x107*x98)) + x117*(x112*(-x103*x98 + x105*x97 + x105*x99 + x107*x96 - x109*x97) + x116) + x77*(-x61 - x63*x67 - x63*x71 - x67*x72 - x67*x73 - x71*x72 - x71*x73);
result[1] = x114*(x101 + x112*(x104*x126 - x104*x127 - x110*x126 + x124*x96 + x128*x98)) + x117*(x112*(-x124*x98 + x126*x97 + x126*x99 - x127*x97 + x128*x96) + x116) + x77*(-x120*x63 - x120*x72 - x120*x73 - x123*x63 - x123*x72 - x123*x73 - x61);
result[2] = x114*(x101 + x112*(x104*x134 - x104*x135 - x110*x134 + x133*x96 + x136*x98)) + x117*(x112*(-x133*x98 + x134*x97 + x134*x99 - x135*x97 + x136*x96) + x116) + x77*(-x130*x63 - x130*x72 - x130*x73 - x132*x63 - x132*x72 - x132*x73 - x61);

    return result;
}

// Define the b vector function for IPM
VectorXf bFunction(Vector3f f, VectorXf s, VectorXf l,
                   Vector3f pt, Vector3f p0, Vector3f v0, Vector3f w0, Matrix3f R, 
                   float mu, float fMax, float fMin, float t){
    // Declare variables
    float f1, f2, f3, s0, s1, s2, s3, s4, s5, l0, l1, l2, l3, l4, l5; 
    float ptx, pty, ptz, p0x, p0y, p0z, v0x, v0y, v0z, w0x, w0y, w0z, r00, r01, r02, r10, r11, r12, r20, r21, r22;

    // Call helper function to assign variables
    assignVariables(f, s, l, pt, p0, v0, w0, R, 
                    f1, f2, f3, s0, s1, s2, s3, s4, s5, l0, l1, l2, l3, l4, l5,
                    ptx, pty, ptz, p0x, p0y, p0z, v0x, v0y, v0z, w0x, w0y, w0z, r00, r01, r02, r10, r11, r12, r20, r21, r22);

float x0 = 0.5*t;
float x1 = r00*r22;
float x2 = 0.010261583652774535*r01*r11;
float x3 = x1*x2;
float x4 = r02*r10;
float x5 = 0.010261583652774535*r21;
float x6 = r01*x5;
float x7 = x4*x6;
float x8 = r00*r12;
float x9 = 0.0051307918263872676*r21;
float x10 = r01*x9;
float x11 = x10*x8;
float x12 = r02*r20;
float x13 = r11*x12;
float x14 = 0.0051307918263872676*r01;
float x15 = x13*x14;
float x16 = pow(r01, 2);
float x17 = r12*r20;
float x18 = 0.010261583652774535*x16*x17;
float x19 = r10*r22;
float x20 = 0.0051307918263872676*x16;
float x21 = x19*x20;
float x22 = r01*x19;
float x23 = sqrt(3);
float x24 = 0.0066690518704222565*x23;
float x25 = r00*x24;
float x26 = x22*x25;
float x27 = x13*x25;
float x28 = r20*x24;
float x29 = r01*x28*x8;
float x30 = r21*x25*x4;
float x31 = pow(r00, 2);
float x32 = x24*x31;
float x33 = r12*r21*x32;
float x34 = r11*r22*x32;
float x35 = pow(t, 2);
float x36 = 0.25*x35;
float x37 = w0x*x0 + x36*(0.010261583652774535*f1*r00*r01*r12*r21 + 0.010261583652774535*f1*r01*r02*r11*r20 + 0.010261583652774535*f1*r10*r22*x16 - f1*x18 - f1*x3 - f1*x7 + 0.0051307918263872676*f2*r00*r01*r11*r22 + 0.0066690518704222565*f2*r00*r01*r12*r20*x23 + 0.0066690518704222565*f2*r00*r02*r10*r21*x23 + 0.0051307918263872676*f2*r01*r02*r10*r21 + 0.0066690518704222565*f2*r11*r22*x23*x31 + 0.0051307918263872676*f2*r12*r20*x16 - f2*x11 - f2*x15 - f2*x21 - f2*x26 - f2*x27 - f2*x33 + 0.0066690518704222565*f3*r00*r01*r10*r22*x23 + 0.0051307918263872676*f3*r00*r01*r11*r22 + 0.0066690518704222565*f3*r00*r02*r11*r20*x23 + 0.0051307918263872676*f3*r01*r02*r10*r21 + 0.0051307918263872676*f3*r12*r20*x16 + 0.0066690518704222565*f3*r12*r21*x23*x31 - f3*x11 - f3*x15 - f3*x21 - f3*x29 - f3*x30 - f3*x34) + atan2(r21, r22);
float x38 = cos(x37);
float x39 = pow(r21, 2);
float x40 = x17*x2;
float x41 = r11*x5;
float x42 = x4*x41;
float x43 = r11*x9;
float x44 = x43*x8;
float x45 = 0.0051307918263872676*r11*x22;
float x46 = pow(r11, 2);
float x47 = 0.010261583652774535*x1*x46;
float x48 = 0.0051307918263872676*x46;
float x49 = x12*x48;
float x50 = r10*x24;
float x51 = r21*x50*x8;
float x52 = r11*x28*x4;
float x53 = r11*x19*x25;
float x54 = r01*x17*x50;
float x55 = pow(r10, 2);
float x56 = x24*x55;
float x57 = r01*r22*x56;
float x58 = r02*r21*x56;
float x59 = w0y*x0 + x36*(0.010261583652774535*f1*r00*r11*r12*r21 + 0.010261583652774535*f1*r01*r10*r11*r22 + 0.010261583652774535*f1*r02*r20*x46 - f1*x40 - f1*x42 - f1*x47 + 0.0066690518704222565*f2*r00*r10*r11*r22*x23 + 0.0051307918263872676*f2*r00*r22*x46 + 0.0066690518704222565*f2*r01*r10*r12*r20*x23 + 0.0051307918263872676*f2*r01*r11*r12*r20 + 0.0051307918263872676*f2*r02*r10*r11*r21 + 0.0066690518704222565*f2*r02*r21*x23*x55 - f2*x44 - f2*x45 - f2*x49 - f2*x51 - f2*x52 - f2*x57 + 0.0066690518704222565*f3*r00*r10*r12*r21*x23 + 0.0051307918263872676*f3*r00*r22*x46 + 0.0051307918263872676*f3*r01*r11*r12*r20 + 0.0066690518704222565*f3*r01*r22*x23*x55 + 0.0066690518704222565*f3*r02*r10*r11*r20*x23 + 0.0051307918263872676*f3*r02*r10*r11*r21 - f3*x44 - f3*x45 - f3*x49 - f3*x53 - f3*x54 - f3*x58) + atan2(-r20, sqrt(pow(r22, 2) + x39));
float x60 = cos(x59);
float x61 = -1.0438413361169103*x38*x60;
float x62 = 0.26096033402922758*x35;
float x63 = f1*x62;
float x64 = 0.010261583652774535*r00*r11*r12*r21 + 0.010261583652774535*r01*r10*r11*r22 + 0.010261583652774535*r02*r20*x46 - x40 - x42 - x47;
float x65 = sin(x59);
float x66 = x38*x65;
float x67 = x64*x66;
float x68 = 0.010261583652774535*r00*r01*r12*r21 + 0.010261583652774535*r01*r02*r11*r20 + 0.010261583652774535*r10*r22*x16 - x18 - x3 - x7;
float x69 = sin(x37);
float x70 = x60*x69;
float x71 = x68*x70;
float x72 = f2*x62;
float x73 = f3*x62;
float x74 = x38*x60;
float x75 = 1.0438413361169103*x74;
float x76 = 2*x35;
float x77 = x76*(p0z - ptz + 1.0*t*v0z + x35*(f1*x75 + f2*x75 + f3*x75 - 4.9050000000000002));
float x78 = x1*x41;
float x79 = x17*x6;
float x80 = x22*x9;
float x81 = x13*x9;
float x82 = 0.010261583652774535*x39*x4;
float x83 = 0.0051307918263872676*x39;
float x84 = x8*x83;
float x85 = r21*x28;
float x86 = x8*x85;
float x87 = x22*x28;
float x88 = r11*x1;
float x89 = x28*x88;
float x90 = x4*x85;
float x91 = pow(r20, 2);
float x92 = x24*x91;
float x93 = r02*r11*x92;
float x94 = r01*r12*x92;
float x95 = w0z*x0 + x36*(0.010261583652774535*f1*r00*r12*x39 + 0.010261583652774535*f1*r01*r10*r21*r22 + 0.010261583652774535*f1*r02*r11*r20*r21 - f1*x78 - f1*x79 - f1*x82 + 0.0066690518704222565*f2*r00*r11*r20*r22*x23 + 0.0051307918263872676*f2*r00*r11*r21*r22 + 0.0051307918263872676*f2*r01*r12*r20*r21 + 0.0066690518704222565*f2*r01*r12*x23*x91 + 0.0066690518704222565*f2*r02*r10*r20*r21*x23 + 0.0051307918263872676*f2*r02*r10*x39 - f2*x80 - f2*x81 - f2*x84 - f2*x86 - f2*x87 - f2*x93 + 0.0051307918263872676*f3*r00*r11*r21*r22 + 0.0066690518704222565*f3*r00*r12*r20*r21*x23 + 0.0066690518704222565*f3*r01*r10*r20*r22*x23 + 0.0051307918263872676*f3*r01*r12*r20*r21 + 0.0051307918263872676*f3*r02*r10*x39 + 0.0066690518704222565*f3*r02*r11*x23*x91 - f3*x80 - f3*x81 - f3*x84 - f3*x89 - f3*x90 - f3*x94) + atan2(r10, r00);
float x96 = sin(x95);
float x97 = x69*x96;
float x98 = cos(x95);
float x99 = x66*x98;
float x100 = x35*(x97 + x99);
float x101 = 2*x100;
float x102 = x36*x38;
float x103 = x102*x68;
float x104 = x69*x98;
float x105 = x36*(0.010261583652774535*r00*r12*x39 + 0.010261583652774535*r01*r10*r21*r22 + 0.010261583652774535*r02*r11*r20*r21 - x78 - x79 - x82);
float x106 = x36*x74;
float x107 = x106*x64;
float x108 = x36*x65;
float x109 = x108*x68;
float x110 = x66*x96;
float x111 = f1 + f2 + f3;
float x112 = x111*x76;
float x113 = 0.95799999999999996*t;
float x114 = 1.0438413361169103*p0x - 1.0438413361169103*ptx + 1.0896047349863365*v0x*x113 + 1.0896047349863365*x100*x111;
float x115 = x35*(-x104 + x110);
float x116 = 2*x115;
float x117 = 1.0438413361169103*p0y - 1.0438413361169103*pty + 1.0896047349863365*v0y*x113 + 1.0896047349863365*x111*x115;
float x118 = -x26 - x27 + x29 + x30 - x33 + x34;
float x119 = x10*x4 - x11 + x118 + x14*x88 - x15 + x17*x20 - x21;
float x120 = x119*x70;
float x121 = -x51 - x52 + x53 + x54 - x57 + x58;
float x122 = r11*x14*x17 + x1*x48 + x121 + x4*x43 - x44 - x45 - x49;
float x123 = x122*x66;
float x124 = x102*x119;
float x125 = -x86 - x87 + x89 + x90 - x93 + x94;
float x126 = x36*(x10*x17 + x125 + x4*x83 - x80 - x81 - x84 + x88*x9);
float x127 = x108*x119;
float x128 = x106*x122;
float x129 = 0.0051307918263872676*r00*r01*r11*r22 + 0.0051307918263872676*r01*r02*r10*r21 + 0.0051307918263872676*r12*r20*x16 - x11 - x118 - x15 - x21;
float x130 = x129*x70;
float x131 = 0.0051307918263872676*r00*r22*x46 + 0.0051307918263872676*r01*r11*r12*r20 + 0.0051307918263872676*r02*r10*r11*r21 - x121 - x44 - x45 - x49;
float x132 = x131*x66;
float x133 = x102*x129;
float x134 = x36*(0.0051307918263872676*r00*r11*r21*r22 + 0.0051307918263872676*r01*r12*r20*r21 + 0.0051307918263872676*r02*r10*x39 - x125 - x80 - x81 - x84);
float x135 = x108*x129;
float x136 = x106*x131;
float x137 = -fMin;

    // Perform your calculations using the assigned variables
    VectorXf result(15);
result[0] = -l0 + l3 + x114*(x101 + x112*(x103*x96 + x104*x105 - x104*x109 - x105*x110 + x107*x98)) + x117*(x112*(-x103*x98 + x105*x97 + x105*x99 + x107*x96 - x109*x97) + x116) + x77*(-x61 - x63*x67 - x63*x71 - x67*x72 - x67*x73 - x71*x72 - x71*x73);
result[1] = -l1 + l4 + x114*(x101 + x112*(x104*x126 - x104*x127 - x110*x126 + x124*x96 + x128*x98)) + x117*(x112*(-x124*x98 + x126*x97 + x126*x99 - x127*x97 + x128*x96) + x116) + x77*(-x120*x63 - x120*x72 - x120*x73 - x123*x63 - x123*x72 - x123*x73 - x61);
result[2] = -l2 + l5 + x114*(x101 + x112*(x104*x134 - x104*x135 - x110*x134 + x133*x96 + x136*x98)) + x117*(x112*(-x133*x98 + x134*x97 + x134*x99 - x135*x97 + x136*x96) + x116) + x77*(-x130*x63 - x130*x72 - x130*x73 - x132*x63 - x132*x72 - x132*x73 - x61);
result[3] = -f1 + fMax + s0;
result[4] = -f2 + fMax + s1;
result[5] = -f3 + fMax + s2;
result[6] = f1 + s3 + x137;
result[7] = f2 + s4 + x137;
result[8] = f3 + s5 + x137;
result[9] = l0 - mu/s0;
result[10] = l1 - mu/s1;
result[11] = l2 - mu/s2;
result[12] = l3 - mu/s3;
result[13] = l4 - mu/s4;
result[14] = l5 - mu/s5;

    return result;
}

// Define the A matrix function for IPM 
MatrixXf AFunction(Vector3f f, VectorXf s, VectorXf l,
                   Vector3f pt, Vector3f p0, Vector3f v0, Vector3f w0, Matrix3f R, 
                   float mu, float fMax, float fMin, float t){
    // Declare variables
    float f1, f2, f3, s0, s1, s2, s3, s4, s5, l0, l1, l2, l3, l4, l5; 
    float ptx, pty, ptz, p0x, p0y, p0z, v0x, v0y, v0z, w0x, w0y, w0z, r00, r01, r02, r10, r11, r12, r20, r21, r22;

    // Call helper function to assign variables
    assignVariables(f, s, l, pt, p0, v0, w0, R, 
                    f1, f2, f3, s0, s1, s2, s3, s4, s5, l0, l1, l2, l3, l4, l5,
                    ptx, pty, ptz, p0x, p0y, p0z, v0x, v0y, v0z, w0x, w0y, w0z, r00, r01, r02, r10, r11, r12, r20, r21, r22);

float x0 = pow(t, 4);
float x1 = 0.5*t;
float x2 = r00*r22;
float x3 = r01*r11;
float x4 = x2*x3;
float x5 = 0.010261583652774535*x4;
float x6 = r02*r10;
float x7 = r01*r21;
float x8 = x6*x7;
float x9 = 0.010261583652774535*x8;
float x10 = r00*r12;
float x11 = x10*x7;
float x12 = 0.0051307918263872676*x11;
float x13 = r02*r20;
float x14 = x13*x3;
float x15 = 0.0051307918263872676*x14;
float x16 = pow(r01, 2);
float x17 = r12*r20;
float x18 = x16*x17;
float x19 = 0.010261583652774535*x18;
float x20 = r10*r22;
float x21 = x16*x20;
float x22 = 0.0051307918263872676*x21;
float x23 = sqrt(3);
float x24 = r00*x23;
float x25 = x20*x24;
float x26 = r01*x25;
float x27 = 0.0066690518704222565*x26;
float x28 = r11*x13*x24;
float x29 = 0.0066690518704222565*x28;
float x30 = r20*x23;
float x31 = r01*x30;
float x32 = x10*x31;
float x33 = 0.0066690518704222565*x32;
float x34 = r21*x24*x6;
float x35 = 0.0066690518704222565*x34;
float x36 = pow(r00, 2);
float x37 = x23*x36;
float x38 = r12*r21*x37;
float x39 = 0.0066690518704222565*x38;
float x40 = r11*r22*x37;
float x41 = 0.0066690518704222565*x40;
float x42 = pow(t, 2);
float x43 = 0.25*x42;
float x44 = w0x*x1 + x43*(0.010261583652774535*f1*r00*r01*r12*r21 + 0.010261583652774535*f1*r01*r02*r11*r20 + 0.010261583652774535*f1*r10*r22*x16 - f1*x19 - f1*x5 - f1*x9 + 0.0051307918263872676*f2*r00*r01*r11*r22 + 0.0066690518704222565*f2*r00*r01*r12*r20*x23 + 0.0066690518704222565*f2*r00*r02*r10*r21*x23 + 0.0051307918263872676*f2*r01*r02*r10*r21 + 0.0066690518704222565*f2*r11*r22*x23*x36 + 0.0051307918263872676*f2*r12*r20*x16 - f2*x12 - f2*x15 - f2*x22 - f2*x27 - f2*x29 - f2*x39 + 0.0066690518704222565*f3*r00*r01*r10*r22*x23 + 0.0051307918263872676*f3*r00*r01*r11*r22 + 0.0066690518704222565*f3*r00*r02*r11*r20*x23 + 0.0051307918263872676*f3*r01*r02*r10*r21 + 0.0051307918263872676*f3*r12*r20*x16 + 0.0066690518704222565*f3*r12*r21*x23*x36 - f3*x12 - f3*x15 - f3*x22 - f3*x33 - f3*x35 - f3*x41) + atan2(r21, r22);
float x45 = cos(x44);
float x46 = pow(r21, 2);
float x47 = x17*x3;
float x48 = 0.010261583652774535*x47;
float x49 = r11*r21;
float x50 = x49*x6;
float x51 = 0.010261583652774535*x50;
float x52 = x10*x49;
float x53 = 0.0051307918263872676*x52;
float x54 = x20*x3;
float x55 = 0.0051307918263872676*x54;
float x56 = pow(r11, 2);
float x57 = x2*x56;
float x58 = 0.010261583652774535*x57;
float x59 = x13*x56;
float x60 = 0.0051307918263872676*x59;
float x61 = r10*x23;
float x62 = r21*x10*x61;
float x63 = 0.0066690518704222565*x62;
float x64 = r11*x30;
float x65 = x6*x64;
float x66 = 0.0066690518704222565*x65;
float x67 = r11*x25;
float x68 = 0.0066690518704222565*x67;
float x69 = r01*x17*x61;
float x70 = 0.0066690518704222565*x69;
float x71 = pow(r10, 2);
float x72 = x23*x71;
float x73 = r01*r22*x72;
float x74 = 0.0066690518704222565*x73;
float x75 = r02*r21*x72;
float x76 = 0.0066690518704222565*x75;
float x77 = w0y*x1 + x43*(0.010261583652774535*f1*r00*r11*r12*r21 + 0.010261583652774535*f1*r01*r10*r11*r22 + 0.010261583652774535*f1*r02*r20*x56 - f1*x48 - f1*x51 - f1*x58 + 0.0066690518704222565*f2*r00*r10*r11*r22*x23 + 0.0051307918263872676*f2*r00*r22*x56 + 0.0066690518704222565*f2*r01*r10*r12*r20*x23 + 0.0051307918263872676*f2*r01*r11*r12*r20 + 0.0051307918263872676*f2*r02*r10*r11*r21 + 0.0066690518704222565*f2*r02*r21*x23*x71 - f2*x53 - f2*x55 - f2*x60 - f2*x63 - f2*x66 - f2*x74 + 0.0066690518704222565*f3*r00*r10*r12*r21*x23 + 0.0051307918263872676*f3*r00*r22*x56 + 0.0051307918263872676*f3*r01*r11*r12*r20 + 0.0066690518704222565*f3*r01*r22*x23*x71 + 0.0066690518704222565*f3*r02*r10*r11*r20*x23 + 0.0051307918263872676*f3*r02*r10*r11*r21 - f3*x53 - f3*x55 - f3*x60 - f3*x68 - f3*x70 - f3*x76) + atan2(-r20, sqrt(pow(r22, 2) + x46));
float x78 = cos(x77);
float x79 = -x45*x78;
float x80 = 0.010261583652774535*r00*r11*r12*r21 + 0.010261583652774535*r01*r10*r11*r22 + 0.010261583652774535*r02*r20*x56 - x48 - x51 - x58;
float x81 = sin(x77);
float x82 = x45*x81;
float x83 = x80*x82;
float x84 = f1*x43;
float x85 = 0.010261583652774535*r00*r01*r12*r21 + 0.010261583652774535*r01*r02*r11*r20 + 0.010261583652774535*r10*r22*x16 - x19 - x5 - x9;
float x86 = sin(x44);
float x87 = x78*x86;
float x88 = x85*x87;
float x89 = f2*x43;
float x90 = f3*x43;
float x91 = 0.52192066805845516*x42;
float x92 = 0.00010530009906288958*pow(r00*r11*r12*r21 + r01*r10*r11*r22 + r02*r20*x56 - x47 - x50 - x57, 2);
float x93 = 0.00010530009906288958*pow(r00*r01*r12*r21 + r01*r02*r11*r20 + r10*r22*x16 - x18 - x4 - x8, 2);
float x94 = x45*x78;
float x95 = 1.0438413361169103*x94;
float x96 = 2*x42;
float x97 = x96*(p0z - ptz + 1.0*t*v0z + x42*(f1*x95 + f2*x95 + f3*x95 - 4.9050000000000002));
float x98 = x2*x49;
float x99 = 0.010261583652774535*x98;
float x100 = x17*x7;
float x101 = 0.010261583652774535*x100;
float x102 = x20*x7;
float x103 = 0.0051307918263872676*x102;
float x104 = x13*x49;
float x105 = 0.0051307918263872676*x104;
float x106 = x46*x6;
float x107 = 0.010261583652774535*x106;
float x108 = x10*x46;
float x109 = 0.0051307918263872676*x108;
float x110 = r21*x30;
float x111 = x10*x110;
float x112 = 0.0066690518704222565*x111;
float x113 = x20*x31;
float x114 = 0.0066690518704222565*x113;
float x115 = x2*x64;
float x116 = 0.0066690518704222565*x115;
float x117 = x110*x6;
float x118 = 0.0066690518704222565*x117;
float x119 = pow(r20, 2);
float x120 = x119*x23;
float x121 = r02*r11*x120;
float x122 = 0.0066690518704222565*x121;
float x123 = r01*r12*x120;
float x124 = 0.0066690518704222565*x123;
float x125 = w0z*x1 + x43*(0.010261583652774535*f1*r00*r12*x46 + 0.010261583652774535*f1*r01*r10*r21*r22 + 0.010261583652774535*f1*r02*r11*r20*r21 - f1*x101 - f1*x107 - f1*x99 + 0.0066690518704222565*f2*r00*r11*r20*r22*x23 + 0.0051307918263872676*f2*r00*r11*r21*r22 + 0.0051307918263872676*f2*r01*r12*r20*r21 + 0.0066690518704222565*f2*r01*r12*x119*x23 + 0.0066690518704222565*f2*r02*r10*r20*r21*x23 + 0.0051307918263872676*f2*r02*r10*x46 - f2*x103 - f2*x105 - f2*x109 - f2*x112 - f2*x114 - f2*x122 + 0.0051307918263872676*f3*r00*r11*r21*r22 + 0.0066690518704222565*f3*r00*r12*r20*r21*x23 + 0.0066690518704222565*f3*r01*r10*r20*r22*x23 + 0.0051307918263872676*f3*r01*r12*r20*r21 + 0.0051307918263872676*f3*r02*r10*x46 + 0.0066690518704222565*f3*r02*r11*x119*x23 - f3*x103 - f3*x105 - f3*x109 - f3*x116 - f3*x118 - f3*x124) + atan2(r10, r00);
float x126 = sin(x125);
float x127 = x126*x86;
float x128 = cos(x125);
float x129 = x128*x82;
float x130 = x42*(x127 + x129);
float x131 = 2*x130;
float x132 = x43*x45;
float x133 = x132*x85;
float x134 = x128*x86;
float x135 = 0.010261583652774535*r00*r12*x46 + 0.010261583652774535*r01*r10*r21*r22 + 0.010261583652774535*r02*r11*r20*r21 - x101 - x107 - x99;
float x136 = x135*x43;
float x137 = x43*x94;
float x138 = x137*x80;
float x139 = x43*x81;
float x140 = x134*x85;
float x141 = x126*x82;
float x142 = x126*x133 + x128*x138 + x134*x136 - x136*x141 - x139*x140;
float x143 = f1 + f2 + f3;
float x144 = x143*x42;
float x145 = x142*x144;
float x146 = x131 + 2*x145;
float x147 = 1.0896047349863365*x130 + 1.0896047349863365*x145;
float x148 = x42*(-x134 + x141);
float x149 = 2*x148;
float x150 = x127*x139;
float x151 = x126*x138 + x127*x136 - x128*x133 + x129*x136 - x150*x85;
float x152 = x144*x151;
float x153 = x149 + 2*x152;
float x154 = 1.0896047349863365*x148 + 1.0896047349863365*x152;
float x155 = 4*x42;
float x156 = 0.00010530009906288958*pow(r00*r12*x46 + r01*r10*r21*r22 + r02*r11*r20*r21 - x100 - x106 - x98, 2);
float x157 = 0.125*x80;
float x158 = x0*x140;
float x159 = x158*x78;
float x160 = x0*x135;
float x161 = x126*x160*x94;
float x162 = 2*x144;
float x163 = 0.95799999999999996*t;
float x164 = 1.0438413361169103*p0x - 1.0438413361169103*ptx + 1.0896047349863365*v0x*x163 + 1.0896047349863365*x130*x143;
float x165 = x0*x127;
float x166 = x78*x80;
float x167 = x165*x166;
float x168 = x160*x81;
float x169 = 1.0438413361169103*p0y - 1.0438413361169103*pty + 1.0896047349863365*v0y*x163 + 1.0896047349863365*x143*x148;
float x170 = -x27 - x29 + x33 + x35 - x39 + x41;
float x171 = -x12 - x15 + x170 + 0.0051307918263872676*x18 - x22 + 0.0051307918263872676*x4 + 0.0051307918263872676*x8;
float x172 = x132*x171;
float x173 = -x112 - x114 + x116 + x118 - x122 + x124;
float x174 = 0.0051307918263872676*x100 - x103 - x105 + 0.0051307918263872676*x106 - x109 + x173 + 0.0051307918263872676*x98;
float x175 = x174*x43;
float x176 = x134*x139;
float x177 = -x63 - x66 + x68 + x70 - x74 + x76;
float x178 = x177 + 0.0051307918263872676*x47 + 0.0051307918263872676*x50 - x53 - x55 + 0.0051307918263872676*x57 - x60;
float x179 = x137*x178;
float x180 = x126*x172 + x128*x179 + x134*x175 - x141*x175 - x171*x176;
float x181 = x144*x180;
float x182 = x131 + 2*x181;
float x183 = x126*x179 + x127*x175 - x128*x172 + x129*x175 - x150*x171;
float x184 = x144*x183;
float x185 = x149 + 2*x184;
float x186 = x142*x96;
float x187 = x180*x96;
float x188 = 0.0625*x171;
float x189 = x0*x85;
float x190 = x127*x189;
float x191 = 0.0625*x174;
float x192 = x160*x191;
float x193 = x0*x134;
float x194 = x166*x193;
float x195 = 0.0625*x178;
float x196 = x0*x80;
float x197 = x195*x196;
float x198 = x0*x94;
float x199 = x198*x80;
float x200 = x188*x189;
float x201 = x151*x96;
float x202 = x183*x96;
float x203 = x190*x78;
float x204 = x158*x81;
float x205 = x134*x168;
float x206 = 0.065240083507306895*f1*x198*x80;
float x207 = 0.065240083507306895*f1;
float x208 = x198*x85;
float x209 = x207*x208;
float x210 = 0.065240083507306895*f2;
float x211 = x178*x199;
float x212 = x171*x210;
float x213 = 0.065240083507306895*f3;
float x214 = x171*x213;
float x215 = 0.26096033402922758*x42;
float x216 = x215*x83;
float x217 = x215*x88;
float x218 = x216 + x217;
float x219 = x215*x82;
float x220 = x178*x219;
float x221 = x215*x87;
float x222 = x171*x221;
float x223 = x220 + x222;
float x224 = -1.0438413361169103*x45*x78;
float x225 = -f1*x220 - f1*x222 - f2*x220 - f2*x222 - f3*x220 - f3*x222 - x224;
float x226 = 2*x0*(-f1*x216 - f1*x217 - f2*x216 - f2*x217 - f3*x216 - f3*x217 - x224);
float x227 = x164*(x162*(0.0625*x0*x126*x135*x171*x81*x86 + 0.0625*x0*x126*x174*x81*x85*x86 + 0.0625*x0*x128*x135*x171*x45 + 0.0625*x0*x128*x174*x45*x85 - x126*x191*x199 - x127*x192 - x129*x192 - x129*x197 - x129*x200 - x159*x195 - x161*x195 - x188*x190 - x188*x194) + x186 + x187) + x169*(x162*(0.0625*x0*x126*x135*x171*x45 + 0.0625*x0*x126*x174*x45*x85 + 0.0625*x0*x128*x135*x174*x86 + 0.0625*x0*x128*x135*x178*x45*x78 + 0.0625*x0*x128*x171*x85*x86 + 0.0625*x0*x128*x174*x45*x78*x80 - x141*x192 - x141*x197 - x141*x200 - x167*x188 - x188*x205 - x191*x204 - x195*x203) + x201 + x202) + x225*x226 + x97*(0.065240083507306895*f1*x0*x171*x80*x81*x86 + 0.065240083507306895*f1*x0*x178*x81*x85*x86 + 0.065240083507306895*f2*x0*x171*x80*x81*x86 + 0.065240083507306895*f2*x0*x178*x81*x85*x86 + 0.065240083507306895*f3*x0*x171*x80*x81*x86 + 0.065240083507306895*f3*x0*x178*x81*x85*x86 - x171*x209 - x178*x206 - x208*x212 - x208*x214 - x210*x211 - x211*x213 - x218 - x223);
float x228 = 0.0051307918263872676*r00*r01*r11*r22 + 0.0051307918263872676*r01*r02*r10*r21 + 0.0051307918263872676*r12*r20*x16 - x12 - x15 - x170 - x22;
float x229 = x132*x228;
float x230 = 0.0051307918263872676*r00*r11*r21*r22 + 0.0051307918263872676*r01*r12*r20*r21 + 0.0051307918263872676*r02*r10*x46 - x103 - x105 - x109 - x173;
float x231 = x230*x43;
float x232 = 0.0051307918263872676*r00*r22*x56 + 0.0051307918263872676*r01*r11*r12*r20 + 0.0051307918263872676*r02*r10*r11*r21 - x177 - x53 - x55 - x60;
float x233 = x137*x232;
float x234 = x126*x229 + x128*x233 + x134*x231 - x141*x231 - x176*x228;
float x235 = x144*x234;
float x236 = x131 + 2*x235;
float x237 = x126*x233 + x127*x231 - x128*x229 + x129*x231 - x150*x228;
float x238 = x144*x237;
float x239 = x149 + 2*x238;
float x240 = x234*x96;
float x241 = 0.0625*x228;
float x242 = 0.0625*x230;
float x243 = x160*x242;
float x244 = 0.0625*x232;
float x245 = x196*x244;
float x246 = x189*x241;
float x247 = x237*x96;
float x248 = x199*x232;
float x249 = x208*x228;
float x250 = x219*x232;
float x251 = x221*x228;
float x252 = x250 + x251;
float x253 = -f1*x250 - f1*x251 - f2*x250 - f2*x251 - f3*x250 - f3*x251 - x224;
float x254 = x164*(x162*(0.0625*x0*x126*x135*x228*x81*x86 + 0.0625*x0*x126*x230*x81*x85*x86 + 0.0625*x0*x128*x135*x228*x45 + 0.0625*x0*x128*x230*x45*x85 - x126*x199*x242 - x127*x243 - x129*x243 - x129*x245 - x129*x246 - x159*x244 - x161*x244 - x190*x241 - x194*x241) + x186 + x240) + x169*(x162*(0.0625*x0*x126*x135*x228*x45 + 0.0625*x0*x126*x230*x45*x85 + 0.0625*x0*x128*x135*x230*x86 + 0.0625*x0*x128*x135*x232*x45*x78 + 0.0625*x0*x128*x228*x85*x86 + 0.0625*x0*x128*x230*x45*x78*x80 - x141*x243 - x141*x245 - x141*x246 - x167*x241 - x203*x244 - x204*x242 - x205*x241) + x201 + x247) + x226*x253 + x97*(0.065240083507306895*f1*x0*x228*x80*x81*x86 + 0.065240083507306895*f1*x0*x232*x81*x85*x86 + 0.065240083507306895*f2*x0*x228*x80*x81*x86 + 0.065240083507306895*f2*x0*x232*x81*x85*x86 + 0.065240083507306895*f3*x0*x228*x80*x81*x86 + 0.065240083507306895*f3*x0*x232*x81*x85*x86 - x206*x232 - x209*x228 - x210*x248 - x210*x249 - x213*x248 - x213*x249 - x218 - x252);
float x255 = 1.0896047349863365*x130 + 1.0896047349863365*x181;
float x256 = 1.0896047349863365*x148 + 1.0896047349863365*x184;
float x257 = x171*x87;
float x258 = x178*x82;
float x259 = x87*x91;
float x260 = x82*x91;
float x261 = 0.7693435178008905*x21;
float x262 = 0.7693435178008905*x11;
float x263 = 0.7693435178008905*x14;
float x264 = -x26 - x28 + x32 + x34 - x38 + x40;
float x265 = 4.4476252850382598e-5*pow(0.7693435178008905*x18 - x261 - x262 - x263 + x264 + 0.7693435178008905*x4 + 0.7693435178008905*x8, 2);
float x266 = 0.7693435178008905*x59;
float x267 = 0.7693435178008905*x52;
float x268 = 0.7693435178008905*x54;
float x269 = -x62 - x65 + x67 + x69 - x73 + x75;
float x270 = 4.4476252850382598e-5*pow(-x266 - x267 - x268 + x269 + 0.7693435178008905*x47 + 0.7693435178008905*x50 + 0.7693435178008905*x57, 2);
float x271 = 0.7693435178008905*x108;
float x272 = 0.7693435178008905*x102;
float x273 = 0.7693435178008905*x104;
float x274 = -x111 - x113 + x115 + x117 - x121 + x123;
float x275 = 4.4476252850382598e-5*pow(0.7693435178008905*x100 + 0.7693435178008905*x106 - x271 - x272 - x273 + x274 + 0.7693435178008905*x98, 2);
float x276 = x193*x78;
float x277 = x178*x276;
float x278 = 0.125*x171;
float x279 = x126*x198;
float x280 = 0.125*x174;
float x281 = x165*x78;
float x282 = x178*x281;
float x283 = x188*x228;
float x284 = x191*x230;
float x285 = x0*x129;
float x286 = x188*x232;
float x287 = x195*x232;
float x288 = x0*x141;
float x289 = x193*x81;
float x290 = x198*x207;
float x291 = x178*x232;
float x292 = x198*x291;
float x293 = x198*x228;
float x294 = 2*x0*x225*x253 + x164*(x162*(0.0625*x0*x126*x171*x230*x81*x86 + 0.0625*x0*x126*x174*x228*x81*x86 + 0.0625*x0*x128*x171*x230*x45 + 0.0625*x0*x128*x174*x228*x45 - x165*x283 - x165*x284 - x178*x242*x279 - x191*x232*x279 - x241*x277 - x276*x286 - x283*x285 - x284*x285 - x285*x287) + x187 + x240) + x169*(x162*(0.0625*x0*x126*x171*x230*x45 + 0.0625*x0*x126*x174*x228*x45 + 0.0625*x0*x128*x171*x228*x86 + 0.0625*x0*x128*x174*x230*x86 + 0.0625*x0*x128*x174*x232*x45*x78 + 0.0625*x0*x128*x178*x230*x45*x78 - x188*x230*x289 - x191*x228*x289 - x241*x282 - x281*x286 - x283*x288 - x284*x288 - x287*x288) + x202 + x247) + x97*(0.065240083507306895*f1*x0*x171*x232*x81*x86 + 0.065240083507306895*f1*x0*x178*x228*x81*x86 + 0.065240083507306895*f2*x0*x171*x232*x81*x86 + 0.065240083507306895*f2*x0*x178*x228*x81*x86 + 0.065240083507306895*f3*x0*x171*x232*x81*x86 + 0.065240083507306895*f3*x0*x178*x228*x81*x86 - x171*x228*x290 - x210*x292 - x212*x293 - x213*x292 - x214*x293 - x223 - x252 - x290*x291);
float x295 = 1.0896047349863365*x130 + 1.0896047349863365*x235;
float x296 = 1.0896047349863365*x148 + 1.0896047349863365*x238;
float x297 = x228*x87;
float x298 = x232*x82;
float x299 = 4.4476252850382598e-5*pow(0.7693435178008905*r00*r01*r11*r22 + 0.7693435178008905*r01*r02*r10*r21 + 0.7693435178008905*r12*r20*x16 - x261 - x262 - x263 - x264, 2);
float x300 = 4.4476252850382598e-5*pow(0.7693435178008905*r00*r22*x56 + 0.7693435178008905*r01*r11*r12*r20 + 0.7693435178008905*r02*r10*r11*r21 - x266 - x267 - x268 - x269, 2);
float x301 = 4.4476252850382598e-5*pow(0.7693435178008905*r00*r11*r21*r22 + 0.7693435178008905*r01*r12*r20*r21 + 0.7693435178008905*r02*r10*x46 - x271 - x272 - x273 - x274, 2);
float x302 = 0.125*x228*x232;
float x303 = 0.125*x230;

    // Perform your calculations using the assigned variables
    VectorXf result(225);
result[0] = 2.179209469972673*x0*pow(-x79 - x83*x84 - x83*x89 - x83*x90 - x84*x88 - x88*x89 - x88*x90, 2) + x146*x147 + x153*x154 + x164*(x142*x155 + x162*(0.125*x0*x126*x135*x81*x85*x86 - 0.0625*x0*x126*x156*x86 - 0.0625*x0*x126*x86*x93 + 0.125*x0*x128*x135*x45*x85 - 0.0625*x0*x128*x156*x45*x81 - 0.0625*x0*x128*x45*x81*x92 - 0.0625*x0*x128*x45*x81*x93 - x157*x159 - x157*x161)) + x169*(x151*x155 + x162*(0.125*x0*x126*x135*x45*x85 - 0.0625*x0*x126*x156*x45*x81 - 0.0625*x0*x126*x45*x81*x92 - 0.0625*x0*x126*x45*x81*x93 + 0.125*x0*x128*x135*x45*x78*x80 + 0.0625*x0*x128*x156*x86 + 0.0625*x0*x128*x86*x93 - 0.125*x140*x168 - 0.125*x167*x85)) + x97*(-0.065240083507306895*f1*x0*x45*x78*x92 - 0.065240083507306895*f1*x0*x45*x78*x93 + 0.13048016701461379*f1*x0*x80*x81*x85*x86 - 0.065240083507306895*f2*x0*x45*x78*x92 - 0.065240083507306895*f2*x0*x45*x78*x93 + 0.13048016701461379*f2*x0*x80*x81*x85*x86 - 0.065240083507306895*f3*x0*x45*x78*x92 - 0.065240083507306895*f3*x0*x45*x78*x93 + 0.13048016701461379*f3*x0*x80*x81*x85*x86 - x83*x91 - x88*x91);
result[1] = x147*x182 + x154*x185 + x227;
result[2] = x147*x236 + x154*x239 + x254;
result[3] = -1;
result[4] = 0;
result[5] = 0;
result[6] = 1;
result[7] = 0;
result[8] = 0;
result[9] = 0;
result[10] = 0;
result[11] = 0;
result[12] = 0;
result[13] = 0;
result[14] = 0;
result[15] = x146*x255 + x153*x256 + x227;
result[16] = 2.179209469972673*x0*pow(-x257*x84 - x257*x89 - x257*x90 - x258*x84 - x258*x89 - x258*x90 - x79, 2) + x164*(x155*x180 + x162*(0.125*x0*x126*x171*x174*x81*x86 - 0.0625*x0*x126*x265*x86 - 0.0625*x0*x126*x275*x86 + 0.125*x0*x128*x171*x174*x45 - 0.0625*x0*x128*x265*x45*x81 - 0.0625*x0*x128*x270*x45*x81 - 0.0625*x0*x128*x275*x45*x81 - x178*x279*x280 - x277*x278)) + x169*(x155*x183 + x162*(0.125*x0*x126*x171*x174*x45 - 0.0625*x0*x126*x265*x45*x81 - 0.0625*x0*x126*x270*x45*x81 - 0.0625*x0*x126*x275*x45*x81 + 0.125*x0*x128*x174*x178*x45*x78 + 0.0625*x0*x128*x265*x86 + 0.0625*x0*x128*x275*x86 - x171*x193*x280*x81 - x278*x282)) + x182*x255 + x185*x256 + x97*(0.13048016701461379*f1*x0*x171*x178*x81*x86 - 0.065240083507306895*f1*x0*x265*x45*x78 - 0.065240083507306895*f1*x0*x270*x45*x78 + 0.13048016701461379*f2*x0*x171*x178*x81*x86 - 0.065240083507306895*f2*x0*x265*x45*x78 - 0.065240083507306895*f2*x0*x270*x45*x78 + 0.13048016701461379*f3*x0*x171*x178*x81*x86 - 0.065240083507306895*f3*x0*x265*x45*x78 - 0.065240083507306895*f3*x0*x270*x45*x78 - x171*x259 - x178*x260);
result[17] = x236*x255 + x239*x256 + x294;
result[18] = 0;
result[19] = -1;
result[20] = 0;
result[21] = 0;
result[22] = 1;
result[23] = 0;
result[24] = 0;
result[25] = 0;
result[26] = 0;
result[27] = 0;
result[28] = 0;
result[29] = 0;
result[30] = x146*x295 + x153*x296 + x254;
result[31] = x182*x295 + x185*x296 + x294;
result[32] = 2.179209469972673*x0*pow(-x297*x84 - x297*x89 - x297*x90 - x298*x84 - x298*x89 - x298*x90 - x79, 2) + x164*(x155*x234 + x162*(0.125*x0*x126*x228*x230*x81*x86 - 0.0625*x0*x126*x299*x86 - 0.0625*x0*x126*x301*x86 + 0.125*x0*x128*x228*x230*x45 - 0.0625*x0*x128*x299*x45*x81 - 0.0625*x0*x128*x300*x45*x81 - 0.0625*x0*x128*x301*x45*x81 - x232*x279*x303 - x276*x302)) + x169*(x155*x237 + x162*(0.125*x0*x126*x228*x230*x45 - 0.0625*x0*x126*x299*x45*x81 - 0.0625*x0*x126*x300*x45*x81 - 0.0625*x0*x126*x301*x45*x81 + 0.125*x0*x128*x230*x232*x45*x78 + 0.0625*x0*x128*x299*x86 + 0.0625*x0*x128*x301*x86 - x228*x289*x303 - x281*x302)) + x236*x295 + x239*x296 + x97*(0.13048016701461379*f1*x0*x228*x232*x81*x86 - 0.065240083507306895*f1*x0*x299*x45*x78 - 0.065240083507306895*f1*x0*x300*x45*x78 + 0.13048016701461379*f2*x0*x228*x232*x81*x86 - 0.065240083507306895*f2*x0*x299*x45*x78 - 0.065240083507306895*f2*x0*x300*x45*x78 + 0.13048016701461379*f3*x0*x228*x232*x81*x86 - 0.065240083507306895*f3*x0*x299*x45*x78 - 0.065240083507306895*f3*x0*x300*x45*x78 - x228*x259 - x232*x260);
result[33] = 0;
result[34] = 0;
result[35] = -1;
result[36] = 0;
result[37] = 0;
result[38] = 1;
result[39] = 0;
result[40] = 0;
result[41] = 0;
result[42] = 0;
result[43] = 0;
result[44] = 0;
result[45] = -1;
result[46] = 0;
result[47] = 0;
result[48] = 0;
result[49] = 0;
result[50] = 0;
result[51] = 0;
result[52] = 0;
result[53] = 0;
result[54] = 1;
result[55] = 0;
result[56] = 0;
result[57] = 0;
result[58] = 0;
result[59] = 0;
result[60] = 0;
result[61] = -1;
result[62] = 0;
result[63] = 0;
result[64] = 0;
result[65] = 0;
result[66] = 0;
result[67] = 0;
result[68] = 0;
result[69] = 0;
result[70] = 1;
result[71] = 0;
result[72] = 0;
result[73] = 0;
result[74] = 0;
result[75] = 0;
result[76] = 0;
result[77] = -1;
result[78] = 0;
result[79] = 0;
result[80] = 0;
result[81] = 0;
result[82] = 0;
result[83] = 0;
result[84] = 0;
result[85] = 0;
result[86] = 1;
result[87] = 0;
result[88] = 0;
result[89] = 0;
result[90] = 1;
result[91] = 0;
result[92] = 0;
result[93] = 0;
result[94] = 0;
result[95] = 0;
result[96] = 0;
result[97] = 0;
result[98] = 0;
result[99] = 0;
result[100] = 0;
result[101] = 0;
result[102] = 1;
result[103] = 0;
result[104] = 0;
result[105] = 0;
result[106] = 1;
result[107] = 0;
result[108] = 0;
result[109] = 0;
result[110] = 0;
result[111] = 0;
result[112] = 0;
result[113] = 0;
result[114] = 0;
result[115] = 0;
result[116] = 0;
result[117] = 0;
result[118] = 1;
result[119] = 0;
result[120] = 0;
result[121] = 0;
result[122] = 1;
result[123] = 0;
result[124] = 0;
result[125] = 0;
result[126] = 0;
result[127] = 0;
result[128] = 0;
result[129] = 0;
result[130] = 0;
result[131] = 0;
result[132] = 0;
result[133] = 0;
result[134] = 1;
result[135] = 0;
result[136] = 0;
result[137] = 0;
result[138] = 1;
result[139] = 0;
result[140] = 0;
result[141] = 0;
result[142] = 0;
result[143] = 0;
result[144] = l0/s0;
result[145] = 0;
result[146] = 0;
result[147] = 0;
result[148] = 0;
result[149] = 0;
result[150] = 0;
result[151] = 0;
result[152] = 0;
result[153] = 0;
result[154] = 1;
result[155] = 0;
result[156] = 0;
result[157] = 0;
result[158] = 0;
result[159] = 0;
result[160] = l1/s1;
result[161] = 0;
result[162] = 0;
result[163] = 0;
result[164] = 0;
result[165] = 0;
result[166] = 0;
result[167] = 0;
result[168] = 0;
result[169] = 0;
result[170] = 1;
result[171] = 0;
result[172] = 0;
result[173] = 0;
result[174] = 0;
result[175] = 0;
result[176] = l2/s2;
result[177] = 0;
result[178] = 0;
result[179] = 0;
result[180] = 0;
result[181] = 0;
result[182] = 0;
result[183] = 0;
result[184] = 0;
result[185] = 0;
result[186] = 1;
result[187] = 0;
result[188] = 0;
result[189] = 0;
result[190] = 0;
result[191] = 0;
result[192] = l3/s3;
result[193] = 0;
result[194] = 0;
result[195] = 0;
result[196] = 0;
result[197] = 0;
result[198] = 0;
result[199] = 0;
result[200] = 0;
result[201] = 0;
result[202] = 1;
result[203] = 0;
result[204] = 0;
result[205] = 0;
result[206] = 0;
result[207] = 0;
result[208] = l4/s4;
result[209] = 0;
result[210] = 0;
result[211] = 0;
result[212] = 0;
result[213] = 0;
result[214] = 0;
result[215] = 0;
result[216] = 0;
result[217] = 0;
result[218] = 1;
result[219] = 0;
result[220] = 0;
result[221] = 0;
result[222] = 0;
result[223] = 0;
result[224] = l5/s5;

    MatrixXf resultMatrix = Map<MatrixXf>(result.data(), 15, 15);
    return resultMatrix;
}
