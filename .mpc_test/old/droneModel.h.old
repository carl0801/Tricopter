
#include <vector>
#include <cmath>
#include "Eigen/Dense"

using namespace Eigen;
using namespace std;

Vector3f quaternionToRPY(const Quaternionf& q) {
    Matrix3f rotation_matrix = q.toRotationMatrix();
    float roll = atan2(rotation_matrix(2, 1), rotation_matrix(2, 2));
    float pitch = atan2(-rotation_matrix(2, 0), sqrt(rotation_matrix(2, 1) * rotation_matrix(2, 1) + rotation_matrix(2, 2) * rotation_matrix(2, 2)));
    float yaw = atan2(rotation_matrix(1, 0), rotation_matrix(0, 0));
    return Vector3f(roll, pitch, yaw);
}

Quaternionf rpyToQuaternion(const Vector3f& rpy) {
    Quaternionf q;
    q = AngleAxisf(rpy(2), Vector3f::UnitZ()) * AngleAxisf(rpy(1), Vector3f::UnitY()) * AngleAxisf(rpy(0), Vector3f::UnitX());
    return q;
}

tuple<Vector3f, Vector3f, Quaternionf, Vector3f> droneModel(Vector3f f, float t, Vector3f p0, Vector3f v0, Vector3f w0, Quaternionf q){
    float f1 = f[0];
    float f2 = f[1];
    float f3 = f[2];
    float px = p0[0];
    float py = p0[1];
    float pz = p0[2];
    float vx = v0[0];
    float vy = v0[1];
    float vz = v0[2];
    float wx = w0[0];
    float wy = w0[1];
    float wz = w0[2];
    float q0 = q.x();
    float q1 = q.y();
    float q2 = q.z();
    float q3 = q.w();
    Vector3f p;
    Vector3f v;
    Vector3f theta;
    Vector3f w;
p[0] = px + 4.0*pow(t, 2)*(q0*q2 + q1*q3)*(f1 + f2 + f3) + t*vx;
p[1] = py - 4.0*pow(t, 2)*(q0*q1 - q2*q3)*(f1 + f2 + f3) + t*vy;
p[2] = pz + pow(t, 2)*(2.0*f1*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) + 2.0*f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) + 2.0*f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 4.9050000000000002) + t*vz;
v[0] = 8.0*t*(q0*q2 + q1*q3)*(f1 + f2 + f3) + vx;
v[1] = -8.0*t*(q0*q1 - q2*q3)*(f1 + f2 + f3) + vy;
v[2] = t*(4.0*f1*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) + 4.0*f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) + 4.0*f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 9.8100000000000005) + vz;
theta[0] = pow(t, 2)*(-1.0*q1*q2*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(1.292*f1*(q0*q2 - q1*q3)*(q0*q2 + q1*q3) + f1*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q2 + q1*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 0.64600000000000002*f3*(q0*q2 + q1*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(-q0*q3 + q1*q2) - 0.1615)) + 1.0*q1*q3*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(-2*f1*(q0*q1 - q2*q3)*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001) - 1.292*f1*(q0*q2 + q1*q3)*(q0*q3 + q1*q2) + 2*f2*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 2*f2*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(-0.32300000000000001*pow(q0, 2) - 0.32300000000000001*pow(q2, 2) + 0.1615)) + 2*f3*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(-q0*q3 + q1*q2) - 0.1615) + 2*f3*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615))) - 0.25*(4*pow(q0*q2 + q1*q3, 2) + 4*pow(q0*q3 - q1*q2, 2) + pow(2*pow(q0, 2) + 2*pow(q1, 2) - 1, 2))*(1.292*f1*(q0*q1 - q2*q3)*(q0*q2 - q1*q3) - 0.64600000000000002*f1*(q0*q3 + q1*q2)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q1 - q2*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(-0.32300000000000001*pow(q0, 2) - 0.32300000000000001*pow(q2, 2) + 0.1615)) + 0.64600000000000002*f3*(q0*q1 - q2*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615)))) + t*wx + atan2(2*q0*q1 + 2*q2*q3, -2*pow(q1, 2) - 2*pow(q2, 2) + 1);
theta[1] = pow(t, 2)*(-1.0*q1*q2*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(1.292*f1*(q0*q1 - q2*q3)*(q0*q2 - q1*q3) - 0.64600000000000002*f1*(q0*q3 + q1*q2)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q1 - q2*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(-0.32300000000000001*pow(q0, 2) - 0.32300000000000001*pow(q2, 2) + 0.1615)) + 0.64600000000000002*f3*(q0*q1 - q2*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615))) + 1.0*q2*q3*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(-2*f1*(q0*q1 - q2*q3)*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001) - 1.292*f1*(q0*q2 + q1*q3)*(q0*q3 + q1*q2) + 2*f2*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 2*f2*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(-0.32300000000000001*pow(q0, 2) - 0.32300000000000001*pow(q2, 2) + 0.1615)) + 2*f3*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(-q0*q3 + q1*q2) - 0.1615) + 2*f3*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615))) - 0.25*(4*pow(q0*q1 - q2*q3, 2) + 4*pow(q0*q3 + q1*q2, 2) + pow(2*pow(q0, 2) + 2*pow(q2, 2) - 1, 2))*(1.292*f1*(q0*q2 - q1*q3)*(q0*q2 + q1*q3) + f1*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q2 + q1*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 0.64600000000000002*f3*(q0*q2 + q1*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(-q0*q3 + q1*q2) - 0.1615))) + t*wy + asin(2*q0*q2 - 2*q1*q3);
theta[2] = pow(t, 2)*(-1.0*q1*q3*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(1.292*f1*(q0*q1 - q2*q3)*(q0*q2 - q1*q3) - 0.64600000000000002*f1*(q0*q3 + q1*q2)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q1 - q2*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(-0.32300000000000001*pow(q0, 2) - 0.32300000000000001*pow(q2, 2) + 0.1615)) + 0.64600000000000002*f3*(q0*q1 - q2*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615))) - 1.0*q2*q3*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(1.292*f1*(q0*q2 - q1*q3)*(q0*q2 + q1*q3) + f1*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q2 + q1*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 0.64600000000000002*f3*(q0*q2 + q1*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(-q0*q3 + q1*q2) - 0.1615)) + 0.25*(4*pow(q0*q1 + q2*q3, 2) + 4*pow(q0*q2 - q1*q3, 2) + pow(2*pow(q0, 2) + 2*pow(q3, 2) - 1, 2))*(-2*f1*(q0*q1 - q2*q3)*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001) - 1.292*f1*(q0*q2 + q1*q3)*(q0*q3 + q1*q2) + 2*f2*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 2*f2*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(-0.32300000000000001*pow(q0, 2) - 0.32300000000000001*pow(q2, 2) + 0.1615)) + 2*f3*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(-q0*q3 + q1*q2) - 0.1615) + 2*f3*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615)))) + t*wz + atan2(2*q0*q3 + 2*q1*q2, -2*pow(q2, 2) - 2*pow(q3, 2) + 1);
w[0] = -1.0/2.0*t*(4*q1*q2*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(1.292*f1*(q0*q2 - q1*q3)*(q0*q2 + q1*q3) + f1*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q2 + q1*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 0.64600000000000002*f3*(q0*q2 + q1*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) - 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615)) - 4*q1*q3*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(-2*f1*(q0*q1 - q2*q3)*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001) - 1.292*f1*(q0*q2 + q1*q3)*(q0*q3 + q1*q2) + 2*f2*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 2*f2*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 - sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615)) + 2*f3*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) - 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 2*f3*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615))) + (4*pow(q0*q2 + q1*q3, 2) + 4*pow(q0*q3 - q1*q2, 2) + pow(2*pow(q0, 2) + 2*pow(q1, 2) - 1, 2))*(1.292*f1*(q0*q1 - q2*q3)*(q0*q2 - q1*q3) - 0.64600000000000002*f1*(q0*q3 + q1*q2)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q1 - q2*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 - sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615)) + 0.64600000000000002*f3*(q0*q1 - q2*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615)))) + wx;
w[1] = -1.0/2.0*t*(4*q1*q2*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(1.292*f1*(q0*q1 - q2*q3)*(q0*q2 - q1*q3) - 0.64600000000000002*f1*(q0*q3 + q1*q2)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q1 - q2*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 - sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615)) + 0.64600000000000002*f3*(q0*q1 - q2*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615))) - 4*q2*q3*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(-2*f1*(q0*q1 - q2*q3)*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001) - 1.292*f1*(q0*q2 + q1*q3)*(q0*q3 + q1*q2) + 2*f2*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 2*f2*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 - sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615)) + 2*f3*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) - 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 2*f3*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615))) + (4*pow(q0*q1 - q2*q3, 2) + 4*pow(q0*q3 + q1*q2, 2) + pow(2*pow(q0, 2) + 2*pow(q2, 2) - 1, 2))*(1.292*f1*(q0*q2 - q1*q3)*(q0*q2 + q1*q3) + f1*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q2 + q1*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 0.64600000000000002*f3*(q0*q2 + q1*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) - 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615))) + wy;
w[2] = -1.0/2.0*t*(4*q1*q3*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(1.292*f1*(q0*q1 - q2*q3)*(q0*q2 - q1*q3) - 0.64600000000000002*f1*(q0*q3 + q1*q2)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q1 - q2*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 - sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615)) + 0.64600000000000002*f3*(q0*q1 - q2*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615))) + 4*q2*q3*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(1.292*f1*(q0*q2 - q1*q3)*(q0*q2 + q1*q3) + f1*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q2 + q1*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 0.64600000000000002*f3*(q0*q2 + q1*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) - 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615)) - (4*pow(q0*q1 + q2*q3, 2) + 4*pow(q0*q2 - q1*q3, 2) + pow(2*pow(q0, 2) + 2*pow(q3, 2) - 1, 2))*(-2*f1*(q0*q1 - q2*q3)*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001) - 1.292*f1*(q0*q2 + q1*q3)*(q0*q3 + q1*q2) + 2*f2*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 2*f2*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 - sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615)) + 2*f3*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) - 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 2*f3*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615)))) + wz;
    Quaternionf quaternion = rpyToQuaternion(theta);
    return make_tuple(p, v, quaternion, w); 
}

Quaternionf droneRotation(Vector3f f, float t, Vector3f w0, Quaternionf q){
    float f1 = f[0];
    float f2 = f[1];
    float f3 = f[2];
    float wx = w0[0];
    float wy = w0[1];
    float wz = w0[2];
    float q0 = q.x();
    float q1 = q.y();
    float q2 = q.z();
    float q3 = q.w();
    Vector3f theta;
theta[0] = pow(t, 2)*(-1.0*q1*q2*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(1.292*f1*(q0*q2 - q1*q3)*(q0*q2 + q1*q3) + f1*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q2 + q1*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 0.64600000000000002*f3*(q0*q2 + q1*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(-q0*q3 + q1*q2) - 0.1615)) + 1.0*q1*q3*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(-2*f1*(q0*q1 - q2*q3)*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001) - 1.292*f1*(q0*q2 + q1*q3)*(q0*q3 + q1*q2) + 2*f2*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 2*f2*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(-0.32300000000000001*pow(q0, 2) - 0.32300000000000001*pow(q2, 2) + 0.1615)) + 2*f3*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(-q0*q3 + q1*q2) - 0.1615) + 2*f3*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615))) - 0.25*(4*pow(q0*q2 + q1*q3, 2) + 4*pow(q0*q3 - q1*q2, 2) + pow(2*pow(q0, 2) + 2*pow(q1, 2) - 1, 2))*(1.292*f1*(q0*q1 - q2*q3)*(q0*q2 - q1*q3) - 0.64600000000000002*f1*(q0*q3 + q1*q2)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q1 - q2*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(-0.32300000000000001*pow(q0, 2) - 0.32300000000000001*pow(q2, 2) + 0.1615)) + 0.64600000000000002*f3*(q0*q1 - q2*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615)))) + t*wx + atan2(2*q0*q1 + 2*q2*q3, -2*pow(q1, 2) - 2*pow(q2, 2) + 1);
theta[1] = pow(t, 2)*(-1.0*q1*q2*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(1.292*f1*(q0*q1 - q2*q3)*(q0*q2 - q1*q3) - 0.64600000000000002*f1*(q0*q3 + q1*q2)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q1 - q2*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(-0.32300000000000001*pow(q0, 2) - 0.32300000000000001*pow(q2, 2) + 0.1615)) + 0.64600000000000002*f3*(q0*q1 - q2*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615))) + 1.0*q2*q3*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(-2*f1*(q0*q1 - q2*q3)*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001) - 1.292*f1*(q0*q2 + q1*q3)*(q0*q3 + q1*q2) + 2*f2*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 2*f2*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(-0.32300000000000001*pow(q0, 2) - 0.32300000000000001*pow(q2, 2) + 0.1615)) + 2*f3*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(-q0*q3 + q1*q2) - 0.1615) + 2*f3*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615))) - 0.25*(4*pow(q0*q1 - q2*q3, 2) + 4*pow(q0*q3 + q1*q2, 2) + pow(2*pow(q0, 2) + 2*pow(q2, 2) - 1, 2))*(1.292*f1*(q0*q2 - q1*q3)*(q0*q2 + q1*q3) + f1*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q2 + q1*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 0.64600000000000002*f3*(q0*q2 + q1*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(-q0*q3 + q1*q2) - 0.1615))) + t*wy + asin(2*q0*q2 - 2*q1*q3);
theta[2] = pow(t, 2)*(-1.0*q1*q3*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(1.292*f1*(q0*q1 - q2*q3)*(q0*q2 - q1*q3) - 0.64600000000000002*f1*(q0*q3 + q1*q2)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q1 - q2*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(-0.32300000000000001*pow(q0, 2) - 0.32300000000000001*pow(q2, 2) + 0.1615)) + 0.64600000000000002*f3*(q0*q1 - q2*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) + f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615))) - 1.0*q2*q3*(pow(q0, 2) + pow(q1, 2) + pow(q2, 2) + pow(q3, 2) - 1)*(1.292*f1*(q0*q2 - q1*q3)*(q0*q2 + q1*q3) + f1*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001)*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 0.64600000000000002*f2*(q0*q2 + q1*q3)*(q0*q2 - q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 0.64600000000000002*f3*(q0*q2 + q1*q3)*(-q0*q2 + q1*q3 + sqrt(3)*(q0*q1 + q2*q3)) - f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(-q0*q3 + q1*q2) - 0.1615)) + 0.25*(4*pow(q0*q1 + q2*q3, 2) + 4*pow(q0*q2 - q1*q3, 2) + pow(2*pow(q0, 2) + 2*pow(q3, 2) - 1, 2))*(-2*f1*(q0*q1 - q2*q3)*(0.64600000000000002*pow(q0, 2) + 0.64600000000000002*pow(q1, 2) - 0.32300000000000001) - 1.292*f1*(q0*q2 + q1*q3)*(q0*q3 + q1*q2) + 2*f2*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(q0*q3 - q1*q2) - 0.1615) + 2*f2*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(-0.32300000000000001*pow(q0, 2) - 0.32300000000000001*pow(q2, 2) + 0.1615)) + 2*f3*(q0*q1 - q2*q3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q1, 2) + 0.32300000000000001*sqrt(3)*(-q0*q3 + q1*q2) - 0.1615) + 2*f3*(q0*q2 + q1*q3)*(0.32300000000000001*q0*q3 + 0.32300000000000001*q1*q2 + sqrt(3)*(0.32300000000000001*pow(q0, 2) + 0.32300000000000001*pow(q2, 2) - 0.1615)))) + t*wz + atan2(2*q0*q3 + 2*q1*q2, -2*pow(q2, 2) - 2*pow(q3, 2) + 1);
    Quaternionf quaternion = rpyToQuaternion(theta);
    return quaternion;
}

Vector3f dronePosition(Vector3f f, float t, Vector3f p0, Vector3f v0, Quaternionf q){
    float f1 = f[0];
    float f2 = f[1];
    float f3 = f[2];
    float px = p0[0];
    float py = p0[1];
    float pz = p0[2];
    float vx = v0[0];
    float vy = v0[1];
    float vz = v0[2];
    float q0 = q.x();
    float q1 = q.y();
    float q2 = q.z();
    float q3 = q.w();
    Vector3f p(3);
p[0] = px + 4.0*pow(t, 2)*(q0*q2 + q1*q3)*(f1 + f2 + f3) + t*vx;
p[1] = py - 4.0*pow(t, 2)*(q0*q1 - q2*q3)*(f1 + f2 + f3) + t*vy;
p[2] = pz + pow(t, 2)*(2.0*f1*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) + 2.0*f2*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) + 2.0*f3*(2*pow(q0, 2) + 2*pow(q3, 2) - 1) - 4.9050000000000002) + t*vz;
    return p;
}
